<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The level manager, this is needed on every in-game level. Do not forget to place it.

/*
**  This item uses creation code!
**
**  leveltime = The time limit in seconds (Optional)
**  levelmusic = The level music (Any sound resource you load in)
**
*/

//Default Values:
leveltime = 0
levelmusic = 0

//Begin playing the music if the p-switch effect is not active or you did not carried a star from a previous room
if (global.pswitch == 0)
&amp;&amp; (global.starman == 0)
    alarm[0] = 2;
    
//Music not disabled
musicdisable = 0

//Manage barrier
barrier = 1;
alarm[6] = 3;

//PSwitch is on?
switchon = 0;

//Manage backgrounds
for (i=0; i&lt;8; i++;) {

    bg[i] = noone;
    fg[i] = background_foreground[i];
}
alarm[7] = 1;

//Screen shake
shake = 0;

//Camera orientation
orientation = 1

//Object to follow
follow = noone;

//Make sure the view follows this object.
view_object[0] = id;

//Create HUD object
instance_create(0,0,obj_hud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create foreground layers if necessary

var i = 0;
repeat (8) {

    //Make the backgrounds not visible
    background_visible[i] = false;

    //Create the respective layer for the background.
    if (background_foreground[i] == true) {
    
        bglayer = instance_create(0,0,obj_foreground);
        bglayer.index = i;
    }
    
    //Find next layer
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable barrier

barrier = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off Gray P-Switch events
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off P-Switch events
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the time is running out

//Play 'Hurry' sound
audio_play_sound(snd_hurry, 0, false);

//Play music
alarm[0] = 120;

//Stop music
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement time variable

//If the player object exists
if (instance_exists(obj_playerparent)) {

    //If there's time left
    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Decrement again
        alarm[2] = 50;
        
        //Play the hurry up sound at 100 seconds
        if (global.time == 101)
            alarm[3] = 50;
            
        //Kill the player at 0 seconds
        else if (global.time == 1)
            alarm[4] = 50;
    }
}

//Otherwise, hold.
else {

    alarm[2] = 50;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music

FMODInstanceStop(global._stream);
global._stream = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music

//If neither the starman or pswitch theme is playing
if (!FMODInstanceIsPlaying(global._stream_starman)) 
&amp;&amp; (!FMODInstanceIsPlaying(global._stream_pswitch)) {

    //Deny if music has been disabled.
    if (musicdisable)
    exit;
    
    //If the music is not the same as the music from the previous area.
    if (levelmusic != global.levelmusic) {
   
        //Stop old stream
        if (FMODInstanceIsPlaying(global._stream)) {
        
            FMODInstanceStop(global._stream);
            global._stream = -1;
        }
        
        //Play new stream
        global._stream = FMODSoundLoop(levelmusic, 0);
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the music speed

//Set all music at a higher speed if time is running out.
if ((global.time &gt; 0) &amp;&amp; (global.time &lt; 101))
    FMODGroupSetPitch(3,1.33);

//Otherwise, set all music speed to default.
else
    FMODGroupSetPitch(3,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff

//Check what object to follow
event_user(2);

//Follow main player
if (instance_exists(obj_playerparent)) {

    //Always stay relative to the player's Y position.
    y = obj_playerparent.y;
        
    //Make sure the barrier is not active
    if (!barrier) {
    
        //Handle camera position
        event_user(3);
         
        //Prevent the player from going outside the left boundary
        if (obj_playerparent.x &lt; view_xview[0]+5) {
        
            //Snap the player 5 pixels at the left of the boundary
            obj_playerparent.x = view_xview[0]+5;
            
            //Stop Mario's horizontal movement
            if (obj_playerparent.xspeed &lt; 0) {
            
                //Stop horizontal movement
                obj_playerparent.xspeed = 0;
                
                //Stop sliding if necessary
                if (obj_playerparent.sliding) {
                
                    //Stop sliding
                    sliding = false;
                    
                    //Free 'Down' key
                    keyboard_clear(global.downkey);
                }
            }
            
            //End dropdown
            if (instance_exists(obj_dropdown))
                with (obj_dropdown) instance_destroy();
        }
        
        //Otherwise, prevent the player from going outside the right boundary
        else if (obj_playerparent.x &gt; view_xview[0]+view_wview[0]-5) {
        
            //Snap the player 5 pixels at the left of the boundary
            obj_playerparent.x = view_xview[0]+view_wview[0]-5;
            
            //Stop Mario's horizontal movement
            if (obj_playerparent.xspeed &gt; 0) {
            
                //Stop horizontal movement
                obj_playerparent.xspeed = 0;
                
                //Stop sliding if necessary
                if (obj_playerparent.sliding) {
                
                    //Stop sliding
                    sliding = false;
                    
                    //Free 'Down' key
                    keyboard_clear(global.downkey);
                }
            }
                        
            //End dropdown
            if (instance_exists(obj_dropdown))
                with (obj_dropdown) instance_destroy();
        }
        
        //Drop the reserve item
        if (keyboard_check_pressed(global.spacekey))
        &amp;&amp; (!obj_playerparent.disablecontrol)
            event_user(1);        
    }
    
    //Otherwise, snap normally and set no orientation
    else {
    
        x = obj_playerparent.x;
        if (orientation != 0)
            orientation = 0;
    }        
}

//Follow rest of player objects
else if (instance_exists(follow)) {

    //Always stay relative to the player's Y position.
    y = follow.y;

    //If the barrier is not activated
    if (!barrier) {

        //If the player is moving to the left and the camera is panning to the right
        if ((follow.hspeed &lt; 0) 
        || (follow.x-xprevious &lt; 0))
        &amp;&amp; (follow.x &lt; x-56) {
        
            //Make the camera pan to the left
            orientation = -1;
        }
            
        //Otherwise, if the player is moving to the right and the camera is panning to the left
        else if ((follow.hspeed &gt; 0) 
        || (follow.x-xprevious &gt; 0))
        &amp;&amp; (follow.x &gt; x+56) {
        
            //Make the camera pan to the right
            orientation = 1;
        }
            
        //If the camera is to the right and the player is from a certain distance from the camera...
        if ((orientation == 1) &amp;&amp; (follow.x &gt; x-32)) {
        
            //...scroll at a certain speed until the camera catches up...
            if (follow.x &gt; x-28) 
                x += 4+follow.hspeed;
            
            //...and lock the camera in place.
            else 
                x = follow.x+32
        }
        
        //Otherwise, if the camera is to the left and the player is from a certain distance from the camera...
        else if ((orientation = -1) &amp;&amp; (follow.x &lt; x+32)) {
        
            //...scroll at a certain speed until the camera catches up...
            if (follow.x &lt; x+28) 
                x -= 4-follow.hspeed;
            
            //...and lock the camera in place.
            else 
                x = follow.x-32;
        }
    }
    
    //Otherwise, snap normally and set no orientation
    else {
    
        x = follow.x;
        if (orientation != 0)
            orientation = 0;
    }      
}

//Round position
x = round(x);
y = round(y);

//Get a extra life if 100 coins are collected
if (global.coins &gt; 99) {

    //Subtract 100 coins
    global.coins -= 100;
    
    //If there's not spare lifes
    if (obj_persistent.addlives == 0) {
    
        //Play '1up' sound
        audio_play_sound(snd_1up, 0, false);
    
        //Add a life instantly
        lives++;
    }
    else {
    
        //Add a spare life
        with (obj_persistent) {
        
            addlives++;
            alarm[2] = 30;
        }
    }
}

//Drop the reserve item
if (barrier == 0) 
&amp;&amp; (instance_exists(obj_playerparent)) {

    //If 'Space' is pressed and the player's controls are not disabled...
    if ((keyboard_check_pressed(global.spacekey)) 
    &amp;&amp; (!obj_playerparent.disablecontrol))
    
    //...or the player turned into the small form and there's a reserve item saved
    || ((obj_playerparent.invulnerable)
    &amp;&amp; (global.powerup == 0)
    &amp;&amp; (global.reserve &gt; cs_small)) {
    
        //Drop the reserve item
        event_user(0);
    }
}

//Deactivate instances outside the view
instance_deactivate_object(obj_deactivateparent);

//Activate deactivated instances inside the view
instance_activate_region(view_xview[0]-32,view_yview[0]-32,view_wview[0]+64,view_hview[0]+64,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check what item is holding the item

//Check 'Warp'
if (instance_exists(obj_player_warp))
    follow = obj_player_warp;
    
//Check 'Jump'
else if (instance_exists(obj_player_jump))
    follow = obj_player_jump;
    
//Check 'Warpnote'
else if (instance_exists(obj_player_warpnote))
    follow = obj_player_warpnote;
    
//Reset to default
else
    follow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn on Gray P-Switch events
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn on P-Switch events
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy player objects

with (obj_player) instance_destroy();
with (obj_player_warp) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera orientation

//If the player is wallrunning...
if (instance_exists(obj_wallrunner))

//...or it's sliding with either the shell or penguin powerup
|| (((global.powerup == cs_shell) &amp;&amp; (obj_playerparent.sliding))
|| ((global.powerup == cs_penguin) &amp;&amp; (obj_playerparent.sliding))) {

    //If the camera is panned to the right, pan it to the center.
    if (x &gt; obj_playerparent.x+4) then x -= 4-obj_playerparent.xspeed;
    
    //Otherwise, If the camera is panned to the left, pan it to the center.
    else if (x &lt; obj_playerparent.x-4) then x += 4+obj_playerparent.xspeed;

    //Otherwise, do not move it.
    else {
    
        //Stay at the same position of the player.
        x = obj_playerparent.x;
    }
}
    
//Otherwise, do a special follow up
else {

    //If the player is moving to the left and the camera is panning to the right
    if ((obj_playerparent.xspeed &lt; 0) 
    || (obj_playerparent.x-xprevious &lt; 0))
    &amp;&amp; (obj_playerparent.x &lt; x-56) {
    
        //Make the camera pan to the left
        orientation = -1;
    }
        
    //Otherwise, if the player is moving to the right and the camera is panning to the left
    else if ((obj_playerparent.xspeed &gt; 0) 
    || (obj_playerparent.x-xprevious &gt; 0))
    &amp;&amp; (obj_playerparent.x &gt; x+56) {
    
        //Make the camera pan to the right
        orientation = 1;
    }
        
    //If the camera is to the right and the player is from a certain distance from the camera...
    if ((orientation == 1) &amp;&amp; (obj_playerparent.x &gt; x-32)) {
    
        //...scroll at a certain speed until the camera catches up...
        if (obj_playerparent.x &gt; x-28) 
            x += 4+obj_playerparent.xspeed;
        
        //...and lock the camera in place.
        else 
            x = obj_playerparent.x+32
    }
    
    //Otherwise, if the camera is to the left and the player is from a certain distance from the camera...
    else if ((orientation = -1) &amp;&amp; (obj_playerparent.x &lt; x+32)) {
    
        //...scroll at a certain speed until the camera catches up...
        if (obj_playerparent.x &lt; x+28) 
            x -= 4-obj_playerparent.xspeed;
        
        //...and lock the camera in place.
        else 
            x = obj_playerparent.x-32;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the object to follow

//If the main player object exists, ignore other player objects
if (instance_exists(obj_playerparent))
    follow = noone;
    
//Otherwise, check for a existing object
else {

    //Check for 'Warp'
    if (instance_exists(obj_player_warp))
        follow = obj_player_warp;
        
    //Check for 'Jump'
    else if (instance_exists(obj_player_jump))
        follow = obj_player_jump;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop the reserve item

if (global.reserve != cs_small) {

    //Create a reserve item
    with (instance_create(view_xview[0]+view_wview[0]/2, view_yview[0]+10, obj_reserveitem)) {
    
        sprite_index = constant_get_sprite(global.reserve);
    }
        
    //Empty the reserve box
    global.reserve = cs_small;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

///If the main level theme was playing, remember it
if (FMODInstanceIsPlaying(global._stream))
&amp;&amp; (obj_persistent.restart == false)
    global.levelmusic = levelmusic;

//Otherwise, reset.
else {

    global.levelmusic = noone;
    global._stream = -1;
}

//Restart level colours
if (global.skin != 0)
    global.skin = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles the Mario Start! text, room warping, music and timer.

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 50;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0)    
        alarm[2] = 50;
}

//If the player just started the level
if (global.mariostart == 0) {

    //The level has started
    global.mariostart = 1

    //Create the Mario Start! effect
    instance_create(view_xview[0],view_yview[0],obj_mariostart)
}
else {

    //Fade out
    instance_create(0,0,obj_fadeout);
}

//If the player came from another room.
if (global.postchange != -1) {

    //Destroy all player objects
    event_user(4);
    
    //Main
    if (global.postchange == 0)
        player_retrieve(global.postx, global.posty); 
        
    //Warp
    else if (global.postchange = 1)
        with (instance_create(global.postx, global.posty, obj_player_warp)) ready = 1;
    
    //Make the player able to warp between rooms.
    global.postchange = -1;
}

//If the player was riding a shoe on the previous room, create one.
if (global.mount == 2) {

}

//Otherwise, if the player was riding a yoshi, create one.
else if (global.mount == 1)
    with (instance_create(x,y,obj_yoshi)) state = 1;

//If the player carried an item through a pipe in the last room.
else if (global.carrieditem != noone) {

    //Create it
    with (instance_create(x,y,global.carrieditem)) {
    
        //Hold the item
        held = 1;
        
        //Set up the sprite
        if (global.carriedsprite != noone) {
        
            //Change the sprite of the held item
            sprite_index = global.carriedsprite;
            
            //Reset the sprite
            global.carriedsprite = noone;
        }
    }
    
    //Check what item is going to hold the item
    event_user(15);    
    
    //Check if the player exists and make it hold if so.
    if (instance_exists(obj_playerparent)) {
    
        //If the item held was a SMB2 one
        if (object_get_parent(global.carrieditem) == obj_parcarry) {
        
            //If the item held was a blue boomerang
            if (global.carrieditem == obj_boomerang_blue_up)
                obj_playerparent.holding = 3;
            else
                obj_playerparent.holding = 1;
        }
        
        //Otherwise, if the item held was a SMB3 / SMW one
        else if (object_get_parent(global.carrieditem) == obj_parhold)
            obj_playerparent.holding = 2;
    }
    
    //Otherwise
    else {
    
        if (instance_exists(follow))
            follow.holding = 1;
    }

    //Reset held object
    global.carrieditem = noone;
}

//Turn on P-Switch if it was activated on the previous room.
if (global.pswitch &gt; 0) {

    //Turn on the P-Switch
    event_user(5);
    
    //Set the timer
    alarm[4] = max(global.pswitch,30);
    
    //Reset the variable
    global.pswitch = 0;
}

//Turn on gray P-Switch if it was activated on the previous room.
if (global.gswitch &gt; 0) {

    //Turn on the gray P-Switch
    event_user(6);
    
    //Set the timer
    alarm[5] = max(global.gswitch,30);
    
    //Reset the variable
    global.gswitch = 0;
}

//If a star was active on the previous room.
if (global.starman &gt; 0) {

    //Create a new starman object.
    with (instance_create(0,0,obj_invincibility)) alarm[0] = max(global.starman,30);
    
    //Reset the variable
    global.starman = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

//Draw backgrounds
var i;
i = 0;
repeat (8) {

    //If the background is not a foreground
    if (background_foreground[i] == false) {
    
        //Draw main background if it exists
        if ((i = 0) &amp;&amp; (background_index[0] != noone)) {
        
            if (room_height &lt; 384)
				            draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/1.2+(background_x[0]+background_hspeed[0]),background_y[0],1,1,0,c_white,background_alpha[0]);
			         else
                draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/1.2+(background_x[0]+background_hspeed[0]),background_y[0]+(view_yview[0]*(room_height-background_height[0])/(room_height-view_hview[0])),1,1,0,c_white,background_alpha[0]);
        }
        
        //Draw rest of backgrounds if it exists
        else if ((i &gt; 0) &amp;&amp; (background_index[i] != noone)) {
		
			         if (room_height &lt; 384)
				            draw_background_tiled_horizontal_ext(background_index[i],view_xview[0]/(1.2+(0.4*i))+(background_x[i]+background_hspeed[i]),background_y[i],1,1,0,c_white,background_alpha[i]);
			         else
				            draw_background_tiled_horizontal_ext(background_index[i],view_xview[0]/(1.2+(0.4*i))+(background_x[i]+background_hspeed[i]),background_y[i]+(view_yview[0]*(room_height-background_height[i])/(room_height-view_hview[0])),1,1,0,c_white,background_alpha[i]);
		      }
    }
    i++;
}

//Draw pit marker
draw_sprite_ext(spr_pit, 0, 0, room_height-24, room_width/16, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
