<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The titlescreen menu

//Display 'Press Enter!'
display = 0;
alarm[0] = 30;
anim = 0;

//Scale
scale = 0;

//Current page
page = 0;

//Current choice
choice = 0;

//Clear same stuff
io_clear();

//Set the color
draw_set_color(c_white);

//Menu 0: Main Menu
menu[0,0] = 'Start Game';
menu[0,1] = 'Options';
menu[0,2] = 'Info / Credits';
menu[0,3] = 'Quit Game';

//Menu 1: File Menu
menu[1,0] = 'File A'; 
menu[1,1] = 'File B'; 
menu[1,2] = 'File C';
menu[1,3] = 'Back';

//Menu 2: Options Menu
menu[2,0] = 'Window Size';
menu[2,1] = 'Key Configuration';
menu[2,2] = 'V-Sync: Off';
menu[2,3] = 'Back';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display 'Press any key!'

anim = !anim
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage keyboard presses

if ((display == 1) &amp;&amp; (scale == 1)) {

    //Check if the 'Up' key is pressed
    if (keyboard_check_pressed(global.upkey)) {
    
        //If the choice is the first one
        if (choice == 0)
        exit;
        
        //Otherwise, select it
        else {
        
            //Play 'Move' sound
            audio_play_sound(snd_move, false, 0);
            
            //Move up
            choice--;
        }
    }
    
    //Otherwise, check if the 'Down' key is pressed
    else if (keyboard_check_pressed(global.downkey)) {
    
        //If the choice is the last one
        if (choice == 3)
        exit;
        
        //Otherwise, select it
        else {
        
            //Play 'Move' sound
            audio_play_sound(snd_move, false, 0);
            
            //Move down
            choice++;
        }
    }
    
    //Otherwise, if the 'Shift' key is pressed.
    else if (keyboard_check_pressed(global.shiftkey)) {
    
        //Page 0: Main Menu
        if (page == 0) {
        
            //Choice 0: File Selection
            if (choice == 0) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Go to page 1
                page = 1;
                
                //Set the choice and limit
                choice = 0;
            }
            
            //Choice 1: Options Menu
            else if (choice == 1) {
                        
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Go to page 2
                page = 2;
                
                //Set the choice
                choice = 0;
            }
            
            //Choice 2: Information / Credits
            else if (choice == 2) {
                                
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);  
            }
            
            //Choice 3: Quit Game
            else if (choice == 3) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
                
                //Quit the game
                game_end();
            }
        }
        
        //Page 1: File Selection
        else if (page == 1) {
        
            if (choice &lt; 3) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
                
                //Check what file is selected
                switch (choice) {
                
                    //File A
                    case (0): global.file = "GMEASaveA.sav"; break;
                    
                    //File B
                    case (1): global.file = "GMEASaveB.sav"; break;
                    
                    //File C
                    case (2): global.file = "GMEASaveC.sav"; break;
                }
                
                //If the file exists
                if (file_exists(global.file)) {
                
                    load(global.file);
                    if (instance_number(obj_curtainout) == 0) {
                    
                        with (instance_create(view_xview[0]+global.gw/2,view_yview[0]+global.gh/2,obj_curtainout))
                            target = rm_map;
                    }
                }
                
                //Otherwise, go to the intro screen
                else {
                
                    if (instance_number(obj_curtainout) == 0) {
                    
                        with (instance_create(view_xview[0]+global.gw/2,view_yview[0]+global.gh/2,obj_curtainout))
                            target = rm_map;
                    }                    
                }
            }
            
            //Choice 3: Back
            else if (choice == 3) {
                                
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Go to page 0
                page = 0;
                
                //Set the choice
                choice = 0;       
            }            
        }
        
        //Page 2: Options
        else if (page == 2) {
            
            //Choice 0: Window size
            if (choice == 0) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Switch filter
                with (obj_persistent) {
                
                    //If the window is not set to fullscreen
                    if (fullscreen == false) {
                
                        //Change filter
                        filter++;
                        
                        //Check if the filter is the second one
                        if (filter == 3) {
                        
                            //Set default filter
                            filter = 0;
                            
                            //Set fullscreen variable
                            fullscreen = true;
                            
                            //Set fullscreen mode
                            window_set_fullscreen(true);                                                             
                        }
                    }
                    
                    //Otherwise, set it to windowed mode
                    else {
                    
                        //Change fullscreen variable
                        fullscreen = false;
                    
                        //Set windowed mode
                        window_set_fullscreen(false);             
                    }
                    
                    //Apply settings
                    event_user(0);   
                }
            }
            
            //Choice 1: Initialize keyboard config
            else if (choice == 1) {
                        
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            }
            
            //Choice 2: Enable V-Sync
            else if (choice == 2) {
                        
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
                
                //Enable V-Sync
                with (obj_persistent) {
                
                    //Toggle vertical syncronization
                    vsync = !vsync;
                    
                    //Apply settings
                    event_user(0);
                }
            }
            
            //Choice 2: Go back
            else if (choice == 3) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Go to page 0
                page = 0;
                
                //Set the choice
                choice = 0;   
            }        
        }
    }
}

//Increment scale
if (display == 1) {

    scale += 0.1;
    if (scale &gt; 1)
        scale = 1;
}

//Update V-Sync text
if (obj_persistent.vsync)
    menu[2,2] = "V-Sync: On";
else
    menu[2,2] = "V-Sync: Off";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create curtain out effect

instance_create(0,0,obj_curtainin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu.

if (display == 1) {

    //Draw the menu box
    draw_sprite_ext(spr_pausemenu, 0, view_xview[0]+global.gw/2, view_yview[0]+157, scale, scale, 0, c_white, 1);
    
    //Align the text
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    //Set up the font
    draw_set_font(global.font_message);
    
    //Set the alpha
    draw_set_alpha(1);
    
    if (scale == 1) {
    
        //Draw the text on the menu
        for (var i = 0; i &lt; 4; i++) {
        
            //Set the text
            var text = string(menu[page,i]);
            
            //Draw text highlighted
            if (choice != i)
                draw_text_colour_shadowed(view_xview[0]+global.gw/2,view_yview[0]+142+(i*10),string(text), c_black, c_gray, 1, 1, 0.5, 1);
            else
                draw_text_colour_shadowed(view_xview[0]+global.gw/2,view_yview[0]+142+(i*10),"{ " + string(text) + " }", c_black, c_white, 1, 1, 0.5, 1);
        }
    }
    
    //Re align the text
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

//Otherwise, display 'Press any key!'
else {

    //Align the text
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
        
    //Set up the font
    draw_set_font(global.font_interface);
    
    //Set the alpha
    draw_set_alpha(1);
    
    //Draw the text
    if (anim == 0) {
    
        draw_text_colour_shadowed(view_xview[0]+global.gw/2, view_yview[0]+(global.gh/2)+48,"PRESS ANY KEY TO START!", c_black, c_white, 1, 1, 0.5, 1);
    }
    
    //Re align the text
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display the menu

if (instance_number(obj_curtainin) == 0) 
&amp;&amp; (display == 0) {

    //Play 'Correct' sound
    audio_play_sound(snd_correct, 0, false);
    
    //Display menu
    display = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
