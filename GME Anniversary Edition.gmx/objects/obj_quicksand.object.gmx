<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_quicksand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quicksand

//Animate
image_speed = 0.15;

//Surface
surf = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player sink when it's overlapping the sand.

if (other.yspeed &gt;= 0) 
|| (other.yspeed &lt; -2) {

    with (other) {

        //Stop vertical speed
        yspeed = 0;
        ygrav = 0;
        
        //Reset values
        event_user(15);
        
        //Make the player able to jump.
        if (keyboard_check_pressed(global.shiftkey)) 
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,0,0)) {
            
            //Play the 'Jump' sound
            audio_play_sound(snd_jump, 0, false);
            
            //Set the phase.
            state = 2;
            
            //Move upwards.
            y -= 6;
            yspeed = -3;
                        
            //Allow variable jumping
            jumping = 1;
        }
        
        //Sink slowly and cap horizontal speed
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+2,obj_slopeparent,1,0)) {
        
            //Sink slowly
            y += 0.2;
            
            //Cap horizontal speed
            if (abs(xspeed) &gt; 0.2)
                xspeed = 0.2*sign(xscale);         
        }
        
        //Set the state of the player
        if (xspeed == 0)
            state = 0;
        else
            state = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the quicksand and the player if it's inside it.

//Draw the quicksand
for (var i = 0; i&lt;sprite_width/16; i++;) 
for (var j = 0; j&lt;sprite_height/16; j++;) {

    //Draw the quicksand top
    draw_sprite_ext(sprite_index,-1,x+(i*16),y,1,1,0,c_white,1);
    
    //If the vertical scale of the quicksand is equal/greater than 2
    if (image_yscale &gt; 1)    
        draw_sprite_ext(spr_quicksandb,-1,x+i*16,y+16+(j*16),1,1,0,c_white,1);
}

//Draw the player
var left = bbox_left;
var top = bbox_top;
var right = bbox_right;
var bottom = bbox_bottom;

var spr_index = obj_playerparent.sprite_index;
var img_index = obj_playerparent.image_index;
var spr_x = obj_playerparent.x;
var spr_y = obj_playerparent.y+1;
var img_xscale = obj_playerparent.xscale;
var img_yscale = 1;
var color = c_black;
var alpha = 0.5;

var x1 = spr_x - sprite_get_xoffset(spr_index) * img_xscale;
var y1 = spr_y - sprite_get_yoffset(spr_index) * img_yscale;
var x2 = x1 + sprite_get_width(spr_index) * img_xscale;
var y2 = y1 + sprite_get_height(spr_index) * img_yscale;

switch (rectangle_in_rectangle(x1, y1, x2, y2, left, top, right, bottom)) {

    case (1):
        draw_sprite_ext(spr_index, img_index, spr_x, spr_y, img_xscale, img_yscale, 0, color, alpha); break;
    case (2):
        var _x1 = max(0, left - x1) / img_xscale;
        var _y1 = max(0, top - y1) / img_yscale;
        draw_sprite_part_ext(spr_index, img_index, _x1, _y1, sprite_get_width(spr_index) + min(0, right - x2) / img_xscale - _x1, sprite_get_height(spr_index) + min(0, bottom - y2) / img_yscale - _y1, spr_x + (_x1 - sprite_get_xoffset(spr_index)) * img_xscale, spr_y + (_y1 - sprite_get_yoffset(spr_index)) * img_yscale, img_xscale, img_yscale, color, alpha); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
