<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Super Player Parent

//Handle Mario's current state.
//0:    Idle
//1:    Walk
//2:    Jump / Swim
//3:    Climb
state = 0;
statedelay = 0;

//Handle Mario's facing direction.
//1:    Right
//-1:   Left
xscale = 1;

//Handle Mario's direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;

//Make Mario able to hold various items.
//0:    Can hold
//1:    SMB2 style holding.
//2:    SMW/SMB3 style holding.
//3:    SMA4 Boomerang
holding = 0;

//Handle Mario's jump.
//0:    Can jump
//1:    Can stop in mid-air
//2:    Cannot stop in mid-air
jumping = 0;

//Allow Mario to spin-jump.
stompstyle = false;

//Plays a sound when Mario is climbing up a beanstalk.
noise = 0;

//Makes Mario run faster
run = 0;

//Makes Mario change it's direction.
skidnow = 0;
turning = 0;

//Makes Mario swim when on contact with a water surface.
swimming = 0;

//Makes Mario able to buttslide down slopes.
sliding = 0;

//Makes Mario able to fly high.
flying = false;

//Makes Mario able to crouch down.
crouch = 0;

//Handles Mario net smacking
netsmack = false;

//Makes Mario able or not able to move.
move = false;

//Handle P-Meter
pmeter = 0;
pmeterready = false;

//Makes Mario able to kick held items.
kicking = false;

//Is Mario's gravity disabled?
disablegrav = 0;

//Makes Mario invulnerable to all hazards.
invulnerable = false;

//Disables Mario's controls completely.
disablecontrol = false;

//Checks if Mario is stuck on a solid surface.
inwall = false;

//Displays Mario's shooting pose when firing a projectile
firing = 0;

//Is Raccoon / Tanooki Mario wiggling his tail?
wiggle = 0;

//Handles Mario's combos and gives extra lives.
combo = 0;

//Delay the use of the leaf powerup if Mario just dismounted yoshi
dismount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart flying ability

//Allow Mario to fly again.
flying = false;

//Reset P-Meter
pmeter = 0;

//Make Mario walk
run = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when hit

//If the player is still invulnerable to all hazards
if (invulnerable) {

    //Repeat the process
    alarm[1] = 1;
    
    //Change alpha
    image_alpha = !image_alpha;
}

//Otherwise, set up default alpha value
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the player vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

//Floor collision
if (vspeed &gt;= 0) { //If the player is moving down.

    //Check for a semisolid object
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);
    
    //If the semisolid exists and the player is above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,semisolid.y-1,obj_solid,1,0)) {
    
        //Snap above the semisolid platform
        y = semisolid.y-16;
        
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
}
    
//Embed Mario into the slope if he is walking or sliding down a slope to ensure correct slope physics.
if (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0))
&amp;&amp; (state == 1)
    y += 4;

//Handle Slope collision
if (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-1,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0)) {

    //If Mario is moving down onto a slope.
    if (vspeed &gt; 0) {
    
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
    
    //Prevent Mario from getting embed inside a slope.
    if (vspeed &gt; -0.85) {
    
        while (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-1,obj_slopeparent,1,0))
            y--;
    }
}

/*
//Left conveyor belt collision
lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0);
if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
        x--;
}

//Right conveyor belt collision
rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
        x++;
}
*/

//If the player is not swimming
if (!swimming) {

    //If the player is not sliding
    if (!sliding) {

        //If the player is not climbing
        if (state != 3) {
    
            //Execute main behaviour script
            scr_player_behaviour();
            
            //If Mario's horizontal speed is equal/greater than 2.4 and it's not wearing a kuribo shoe.
            if (abs(hspeed) &gt;= 2.4) {
            
                //If Mario is not jumping.
                if (state &lt; 2) {
                
                    //If the P-Meter is full.
                    if (pmeter &gt; 112) {
                        
                        //Keep P-Meter full.
                        pmeter = 112;
                    
                        //Make Mario able to run.
                        run = true;
                    }
                    else {
                    
                        //Fill P-Meter.
                        pmeter += 2;
                    }
                }
                
                //If Mario is on the ground and not running.
                else if ((!run) &amp;&amp; (pmeter &gt; 0))
                    pmeter--;
            }
            
            //Otherwise, if Mario's horizontal speed is lower than 2.4
            else if ((!run) || ((state &lt;= 1) &amp;&amp; (abs(hspeed) &lt; 2.4))) { 
            
                //If Mario is flying and lands on the floor.
                if (flying) {
                    
                    //Allow Mario to fly again.
                    flying = false;
                    
                    //Make Mario walk
                    run = false;
                    
                    //Empty P-Meter.
                    if (pmeter &gt; 0)        
                        pmeter --;
                }
                
                //If Mario is not flying.
                else if (!flying) {
                    
                    //Make Mario walk
                    run = false;
                    
                    //Restart flying.
                    alarm[9] = 0;
                    
                    //Empty P-Meter.
                    if (pmeter &gt; 0)       
                        pmeter --;
                }   
            }
        }
        
        //Otherwise, if the player is climbing.
        else if (state == 3) {
        
            //Execute climb behaviour script
            scr_player_behaviour_climb();
                                    
            //Decrement P-Meter
            flying = false;
            run = false;
            if (pmeter &gt; 0)
                pmeter--;
        }
    }
    
    //Otherwise, if the player is sliding down a slope
    else if (sliding) {
    
        //Execute slide behaviour script
        scr_player_behaviour_slide();
                    
        //Decrement P-Meter
        flying = false;
        run = false;
        if (pmeter &gt; 0)
            pmeter--;
    }
}

//Otherwise, if the player is actually swimming.
else if (swimming) {
    
    //Execute swim behaviour script
    scr_player_behaviour_swim();
                
    //Decrement P-Meter
    flying = false;
    run = false;
    if (pmeter &gt; 0)
        pmeter--;
}

//If the player is bumping into a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,obj_solid,0,0)) {

    //Stop horizontal movement
    hspeed = 0;    
    
    //Prevent the player from getting embed into the wall
    while (collision_rectangle(x,bbox_top+4,bbox_right,bbox_bottom-4,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x--;
}

//Otherwise, if the player is bumping into a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,obj_solid,0,0)) {

    //Stop horizontal movement
    hspeed = 0;    
    
    //Prevent the player from getting embed into the wall
    while (collision_rectangle(bbox_left,bbox_top+4,x,bbox_bottom-4,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x++;
}

//If the player is moving up
if (vspeed &lt; 0) {

    //Collision with a ceiling
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,0,0)) 
    || (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_ceilslopeparent,1,0)) {
    
        //Play 'Bump' sound
        if (!audio_is_playing(snd_bump))        
            audio_play_sound(snd_bump, 0, false);
        
        //Stop vertical movement
        vspeed = 0;
        
        //If the player is not climbing
        if (state = 2)
        &amp;&amp; (state != 3)
            jumping = 2;
    }
}

//Prevent player from getting embed on a ceiling
if ((state &gt; 2) || (delay &gt; 0)) {
    while (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,0))
    || (collision_rectangle(bbox_left,bbox_top-2,bbox_right,bbox_top-1,obj_ceilslopeparent,1,0))
        y++;
}

//If the player is not climbing
if (state != 3) {

    //If the player's controls are not disabled and it's not jumping
    if (state != 2)
    &amp;&amp; (!disablecontrol) {
    
        //Make the player crouch down when the 'Down' key is held
        if (keyboard_check(vk_down))
        &amp;&amp; (!crouch)
            crouch = true;
            
        //Otherwise, if the 'Down' key is no longer pressed
        else if (!keyboard_check(vk_down))
        &amp;&amp; (crouch) {
        
            //Make the player get up
            crouch = false;
            
            //Check if there's a ceiling above the player and make him move until it's not embed in a solid
            if (collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top-16,obj_solid,0,0))
                inwall = true;
        }            
    }
}
else {

    //Make the player get up
    crouch = false;
}

//Check for a nearby swimming surface
var water = collision_rectangle(bbox_left,y,bbox_right,y,obj_swim,0,0);

//If the player is not swimming and makes contact with a water surface
if ((!swimming) &amp;&amp; (water)) {
        
    //Make the player swim.
    swimming = true;
    
    //Make the player get up
    crouch = false;
    
    //Stop horizontal movement
    hspeed = 0;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the player had enough swimming and wants to get out
else if ((swimming) &amp;&amp; (!water)) {

    //If there's not water above and there's not a solid on the way out
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,0,0)) {
    
        //If the player is moving up
        if ((state == 2) &amp;&amp; (vspeed &lt; 0)) {
        
            //If 'Shift' is held
            if (keyboard_check(vk_shift)) {
                
                //Make the player not swim
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set the vertical speed
                vspeed = -3.4675;
            }
            
            //Otherwise, if 'Shift' is not held.
            else {
            
                //If the player is moving up.
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}

//Free the player is he is stuck on a solid.
if (state &lt;= 1) 
&amp;&amp; (!crouch) 
&amp;&amp; (!inwall) {

    //Check for a nearby solid block
    var stuck = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,1);
    
    //If the player is embed on a wall
    if (stuck) {
    
        //If the player is colliding with a left or right modifier
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //If the player is facing right
            if (xscale == 1) {
            
                //If the player's horizontal speed is equal/greater than 0
                if (hspeed &gt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;
                }
                
                //Otherwise, if the player's horizontal speed is lower than 0
                else if (hspeed &lt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;                
                }
            }
            
            //Otherwise, if the player is facing left
            else if (xscale == -1) {
            
                //If the player's horizontal speed if equal/lower than 0.
                if (hspeed &lt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;
                }
                
                //Otherwise, if the player's horizontal speed if greater than 0
                else if (hspeed &gt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;                
                }           
            }
        }
        
        //Otherwise, if the player is overlapping an left modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = -1;              
        }
        
        //Otherwise, if the player is overlapping an right modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = 1;              
        }
    }
}

//Otherwise, if the player gets stuck on a wall
else if (inwall) {

    //Move the player until it's not embed in a wall
    x += 1*sign(direct);
    
    //If the player is not longer embed on a wall, make him able to move
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0))
        inwall = false;
}

//If the player is not in contact with water.
if (!collision_rectangle(bbox_left,y,bbox_right,bbox_bottom,obj_swim,1,1)) {

    //If the player is swimming.
    if (swimming)  
        swimming = false;
}

//Prevent the player from going too high on the level
if (y &lt; -96)
    y = -96;
    
//Otherwise, if he is falling.
else {

    //If the player is below the bottom room boundary, restart the room.
    if (bbox_top &gt; room_height+32)
        room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset all values when landing

//Allow the player to jump again
if (jumping = 2)
    jumping = 0;

//Reset combo variable
if (!sliding)
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player

draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,xscale,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
