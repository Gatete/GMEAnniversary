<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wiggler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler

//How vulnerable is this enemy to various items?
vulnerable = 2;

//How vulnerable is this enemy to the player?
stomp = 4;

//How vulnerable is this enemy to yoshi?
edible = 2;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Animate
image_speed = 0.125;

//Start moving
alarm[10] = 2;

//Not angry
ready = 0

//Colour
color = 0;

//Previous horizontal speed
prevhspeed = 0;

//Create body parts
for (var i=0; i&lt;4; i++) {

    //Create body part
    var b = instance_create(xstart,ystart,obj_wiggler_body);
    
    //Assign the body to a id
    mybody[i] = b;
        b.parent = id;
        b.offset = 10+(8*i);
        b.image_index = 0+i
        b.depth = -1+i
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy body parts

for (i=0; i&lt;4; i++)
    with (mybody[i]) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

if (!outside_view()) {

    //Check if moving
    moving = 1;
    
    //Set the body horizontal scale
    for (i=0; i&lt;4; i++) {
    
        with (mybody[i]) {
        
            if (!instance_exists(obj_playerparent))
            || (obj_playerparent.x &lt; x)
                xscale = -1;
            else
                xscale = 1;
        }
    }
        
    //Inherit event
    event_inherited();
    
    //Turn around
    event_user(15);
}
else
    alarm[10] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go towards the player

//End angrying phase
ready = 2;
image_speed = 0.3;
hspeed = xscale;

//Make body parts angry
for (i=0; i&lt;4; i++) {

    with (mybody[i]) {

        ready = 2;
        image_speed = 0.3;
        hspeed = xscale;
        if (temp &gt; 0) {
        
            alarm[0] = temp;
            temp = 0;
        }
    }
}

//Turn towards the player
alarm[0] = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between colours

if (ready == 1) {

    alarm[1] = 2;
    color++;
    if (color &gt; 8)
        color = 0;
}
else
    color = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

//If the player does exist
if (instance_exists(obj_playerparent)) {

    //If the player is at the left and the wiggler is moving right
    if ((obj_playerparent.x &lt; x) &amp;&amp; (hspeed &gt; 0)) {
    
        hspeed = -1;
        event_user(15);
    }
    
    //Otherwise, if the player is at the right and the wiggler is moving left
    else if ((obj_playerparent.x &gt; x) &amp;&amp; (hspeed &lt; 0)) {
    
        hspeed = 1;
        event_user(15);
    }
    
    //Wait
    else
        alarm[0] = 50;
}
else
    alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure body parts don't get lost

for (var i=0; i&lt;4; i++) {

    if (!instance_exists(mybody[i]))
        instance_activate_object(mybody[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler logic

//Remember horizontal speed
prevhspeed = hspeed;

//Inherit event
event_inherited();

//Turn at ledges
event_user(6);

//If the wiggler horizontal speed changer, turn around
if (prevhspeed != hspeed)
    event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn around

//Change facing direction
if (hspeed &gt; 0)
    xscale = 1;
else
    xscale = -1;

//Make body parts turn around in order
if (ready == 0) {

    for (i=0; i&lt;4; i++) {
    
        with (mybody[i]) {
        
            alarm[0] = 20+(16*other.i);
            image_index = 0+other.i;
        }
    }
}

//Faster if angry, and continue chasing Mario
else if (ready == 2) {

    for (i=0; i&lt;4; i++) {
    
        with (mybody[i]) {
        
            alarm[0] = 10+(8*other.i);
            image_index = 0+other.i;
        }
    }
    alarm[0] = 50;
}

//Set their next direction
for (i=0; i&lt;4; i++)
    with (mybody[i]) nextxscale = other.xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special turn at enemies script

//If moving right
if (hspeed &gt; 0) {

    //Check for a enemy object
    if (collision_rectangle(bbox_right,bbox_top,bbox_right+hspeed*2,bbox_bottom,obj_enemyparent,0,1))
    &amp;&amp; (!collision_rectangle(bbox_right,bbox_top,bbox_right+hspeed*2,bbox_bottom,obj_wiggler_body,0,1))
        hspeed = -hspeed;
}

//Otherwise, if moving left
else if (hspeed &lt; 0) {

    //Check for a enemy object
    if (collision_rectangle(bbox_left-hspeed*2,bbox_top,bbox_left,bbox_bottom,obj_enemyparent,0,1))
    &amp;&amp; (!collision_rectangle(bbox_left-hspeed*2,bbox_top,bbox_left,bbox_bottom,obj_wiggler_body,0,1))
        hspeed = -hspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler stomp

//If wiggler is not angry
if (ready == 0) {

    //Get points based on combo
    if (obj_playerparent.hitcombo &lt;= 6) //If the player did 6 or less consecutive stomps
        with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(2+obj_playerparent.hitcombo);
    else
        with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(9);
    
    //Increment combo
    obj_playerparent.hitcombo++;
    
    //Kill flower
    with (instance_create(x,y,obj_enemy_dead)) {
    
        sprite_index = spr_wiggler_flower;
        image_xscale = other.xscale;
    }
        
    //Make angry
    ready = 1;
    sprite_index = spr_wiggler_mad;
    image_speed = 0;
    hspeed = 0;

    //Make body parts angry
    for (i=0; i&lt;4; i++) {
    
        with (mybody[i]) {

            ready = 1;
            sprite_index = spr_wiggler_mad_body;
            image_speed = 0;
            hspeed = 0;
            if (alarm[0] &gt; -1) {
            
                //Do not halve if there's only 1 step left.
                if (alarm[0] == 1) {
                
                    temp = 1;
                    alarm[0] = -1;
                }
                
                //Otherwise, halve
                else if (alarm[0] &gt; 1) {
                
                    temp = round(alarm[0] / 2);
                    alarm[0] = -1;
                }
            }
        }
    }
    
    //Cycle between palettes
    alarm[1] = 1;

    //Go after the player
    alarm[2] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler kill

//Create dead object.
imdead = instance_create(x,y,obj_enemy_dead);

//Set the sprite
imdead.sprite_index = sprite_index;

//Set the facing direction
imdead.image_xscale = xscale;

//Set a waving movement
imdead.hspeed = 0.5;
imdead.alarm[0] = 4;

//Set the vertical speed
imdead.vspeed = -6;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the xscale
    xscale = other.image_xscale;
    
    //Set the sprite
    if (other.sprite_index == spr_wiggler)
        sprite_index = spr_wiggler_body;
    else
        sprite_index = spr_wiggler_mad_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw wiggler head

//If transforming, apply palette
if (ready == 1) {

    pal_swap_set(spr_palette_wiggler, color);
}

//Draw wiggler
draw_sprite_ext(sprite_index, -1, round(x), y-1, xscale, 1, 0, c_white, 1);

//If transforming, end palette
if (ready == 1)
    pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
