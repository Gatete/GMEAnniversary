<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_football</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_bluebrick_th</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A held football

//Inherit create event
event_inherited();

//Animate
image_speed = 0;

//Blink
alarm[0] = 540;

//Destroy
alarm[1] = 600;

//Whether the football was kicked
ready = 0;

//Whether the football falls
ready2 = 0;

//Combo
hitcombo = 0;

//How many times did this object bounce
bounces = 0;

//Turn into a stone
if (floor(random(100)) &lt; 10)
    sprite_index = spr_stone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit default event

if (held) {

    //If the player was holding something
    if (instance_exists(obj_playerparent))
    &amp;&amp; (obj_playerparent.holding == 2)
        obj_playerparent.holding = 0; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

instance_create(x-8,y,obj_smoke);
instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink

alarm[0] = 1;
image_alpha = !image_alpha
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holdable item logic when not held

//If the item is not being held
if (!held) {

    //If the item is not stuck in a solid
    if (!inwall) {
    
        //Wall collision
        event_user(3);

        //Floor collision
        event_user(4);
                
        //Slowdown if in contact with the floor and not kicked
        if (ready == 0)
        &amp;&amp; (vspeed == 0) {
        
            //If the item is not underwater
            if (!swimming) {
            
                //Slowdown until it stops
                hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
                if (abs(hspeed) &lt; 0.075)
                    hspeed = 0;
            }
            
            //Otherwise, if the item is underwater
            else if (swimming) {
                        
                //Slowdown until it stops
                hspeed = max(0,abs(hspeed)-0.0375)*sign(hspeed);
                if (abs(hspeed) &lt; 0.0375)
                    hspeed = 0;            
            }
        }
        
        //Stop it if it gets stuck in a solid
        if (ready == 0)
        &amp;&amp; (vspeed &lt; 0)
        &amp;&amp; (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0)) {
        
            //Stop movement
            speed = 0;
            gravity = 0;
            
            //Make the item move
            inwall = true;
        }        
    }
    
    //Otherwise, if the item is stuck in a solid
    else {
    
        //Move it until it does not make contact with a solid
        x -= 2.5*sign(dir);
       
        //If the item is not longer overlapping a solid
        if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
            inwall = false;        
    }
    
    //Check for a body of water
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);
    
    //If the object is not underwater and makes contact with water
    if (water) 
    &amp;&amp; (!swimming) {
    
        //Make the object go underwater
        swimming = true;
        
        //Stop vertical movement
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    
    //Otherwise, if the object is underwater and it's not underwater, end swimming.
    else if (!water) 
    &amp;&amp; (swimming)
        swimming = false;
}

//Destroy when outside the view
if (outside_view())
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bluebrick_th">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ignore this event

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player interact with the item

//If the item was not kicked yet
if (!ready) {

    //If the item is not being held
    if (canhold())
    &amp;&amp; (!inwall)
    &amp;&amp; (other.bbox_bottom &gt; bbox_top) {
        
        //Make the player hold it
        other.holding = 2;
        
        //Hold
        held = 1;
        
        //Stop movement
        speed = 0;
        gravity = 0;        
    } 
    
    //Otherwise, if the item is not moving up
    else if ((vspeed &gt;= 0) &amp;&amp; (!held)) {
    
        //Play 'Kick' sound
        audio_play_sound(snd_kick, 0, false);
                
        //Make the player visually kick the item
        with (obj_playerparent) {
        
            if (holding == 0)
                event_user(4);
        }
        
        //Set default animation
        image_speed = 0.15;
        
        //Stay visible
        image_alpha = 1;
        
        //Stop alarms
        alarm[0] = -1;
        alarm[1] = -1;
        
        //Kick it
        ready = 1;
        
        //Create thump
        with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;
        
        //Set the vertical speed
        vspeed = -2.7;
        
        //Set the horizontal speed
        if (obj_playerparent.x &lt; x)
            hspeed = 2.7;
        else
            hspeed = -2.7;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Custom floor / ceiling collision

//When moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);
    
    //If the semisolid exists, snap above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
        y = semisolid.bbox_top-16;
}

//Embed the NPC into the slope to ensure correct slope physics.
if (collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0)) 
&amp;&amp; (vspeed == 0)
    y += 4;
    
//Handle slope collision
if (vspeed &gt; -0.85)
&amp;&amp; ((collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0))) {

    //Stay embed on the slope.
    while (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
        y--;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_semisolid,0,0)))
|| (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+1,obj_slopeparent,1,0)) {

    //Stop vertical movement
    gravity = 0;
    
    //If the football turned into a stone
    if (sprite_index == spr_stone)
        event_user(0);
    
    //Otherwise, bounce
    else {
    
        //If not kicked, stop vertical movement
        if (ready == 0) 
            vspeed = 0;
            
        //Otherwise, bounce
        else {
        
            bounces++
            if (bounces mod 2) {
            
                if (swimming)
                    vspeed = -1.5;
                else
                    vspeed = -3;
            }
            else {
            
                if (swimming)
                    vspeed = -2.5;
                else
                    vspeed = -5;
            }
        }
    }
}
else {

    //Set the gravity when not underwater
    if (!swimming) {
    
        //Gravity
        gravity = 0.2;
        
        //Cap vertical speed
        if (vspeed &gt; 4)
            vspeed = 4;
    }
    
    //Otherwise, set the gravity when underwater
    else {
    
        //Gravity
        gravity = 0.03;
        
        //Cap vertical speed
        if (vspeed &gt; 1)
            vspeed = 1;
    }
}

//If the player is moving up
if (vspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left+1,bbox_top+vspeed-1,bbox_right-1,bbox_top-1,obj_solid,1,0)) 
|| (collision_rectangle(bbox_left+1,bbox_top+vspeed-1,bbox_right-1,bbox_top-1,obj_ceilslopeparent,1,0))) {
    
    //Prevent the NPC from getting stuck on a ceiling.
    while (collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0))
        y++;
    
    //Stop vertical speed
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving left
if (hspeed &lt; 0) 
&amp;&amp; (collision_rectangle(bbox_left-hspeed, bbox_top+1, bbox_left, bbox_bottom-4, obj_solid, 0, 0)){

    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-4, obj_solid, 0, 0))
        x++;
        
    //Reverse horizontal speed
    hspeed = -hspeed;    
}

//Otherwise, if moving right
else if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right, bbox_top+1, bbox_right+hspeed, bbox_bottom-4, obj_solid, 0, 0)){

    //Prevent getting embed on walls
    while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-4, obj_solid, 0, 0))
        x--;
        
    //Reverse horizontal speed
    hspeed = -hspeed;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event.

//If 'Up' is pressed, throw it upwards.
if (keyboard_check(global.upkey)) {

    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Create hit
    with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
        
        //Set the horizontal speed
        hspeed = obj_playerparent.xspeed/2;
        
        //If the item is not in a water surface
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0))
            vspeed = -7;
            
        //Otherwise
        else {

            vspeed = -3.5;
            swimming = true;
        }
    }
    else
        inwall = true;
}

//Otherwise, if 'Down' is pressed.
else if (keyboard_check(global.downkey)) {
    
    //Check if the object is stuck on a solid and move it
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        //Move it to a safe position
        inwall = true;
        
        //Stop it
        hspeed = 0;
    }
    
    //If there's not a slope in place...
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
        hspeed = 0.5*obj_playerparent.xscale;
    
    //Otherwise
    else
        vspeed = 0.1;    
}

//Otherwise, throw it to the side.
else {
        
    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
            
    //Set the horizontal speed.
    hspeed = 2.7*obj_playerparent.xscale;
    
    //Animate
    image_speed = 0.15;
    
    //Ignore alarms
    alarm[0] = -1;
    alarm[1] = -1;
    
    //Kicked
    ready = 1;
    
    //Create hit
    with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If there's a solid in position, turn around
    if (place_meeting(x,y,obj_solid))
        hspeed = -hspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//If the football turned to be a stone...
if (sprite_index == spr_stone) {

    //Play 'Break' sound
    audio_play_sound(snd_break, 0, false);
    
    //Create shards
    with (instance_create(x,y+8,obj_shard)) {
    
        motion_set(45, 6);
        sprite_index = spr_shard_g;
    }
    with (instance_create(x,y+8,obj_shard)) {
    
        motion_set(60, 6);
        sprite_index = spr_shard_g;
    }
    with (instance_create(x,y+8,obj_shard)) {
    
        motion_set(120, 6);
        sprite_index = spr_shard_g;
    }
    with (instance_create(x,y+8,obj_shard)) {
    
        motion_set(135, 6);
        sprite_index = spr_shard_g;
    }
}

//Otherwise, kill normally
else {

    //Create dead object
    imdead = instance_create(x,y,obj_enemy_dead);
    
    //Make the dead object hereby the sprite
    imdead.sprite_index = sprite_index;
    
    //Make the dead object hereby the frame
    imdead.image_index = image_index;
    
    //Make the dead object hereby the scale
    imdead.image_xscale = 1;
    
    //Set the hspeed of the dead object
    if (other.hspeed == 0) {
    
        //If the kill object is at the left of this object
        if (other.bbox_left+other.bbox_right/2 &lt; bbox_left+bbox_right/2)
            imdead.hspeed = 1;
        else if (other.bbox_left+other.bbox_right/2 &gt; bbox_left+bbox_right/2)
            imdead.hspeed = -1;
    }
    else {
    
        if (other.hspeed &gt; 0)
            imdead.hspeed = 1;
        else if (other.hspeed &lt; 0)
            imdead.hspeed = -1;
    }
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
