<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mapmario</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's the player on the map

//Check if the position was modified before
if (ds_map_exists(global.mapscreen,"mapx")) {

    //Place the player in position
    x = ds_map_find_value(global.mapscreen,"mapx");
    y = ds_map_find_value(global.mapscreen,"mapy");
}
else {

    //Set up a map
    ds_map_add(global.mapscreen,"mapx",x);
    ds_map_add(global.mapscreen,"mapy",y);
}

//Do not animate
image_speed = 0;
image_index = 0;
alarm[3] = 1;

//Facing direction
xscale = 1;

//Whether the player can move
ready = 0;

//Whether the player can enter a level
letsgo = 0;

//Current player frame
frame = 0;

//Current arrow frame / alpha
anim = 0;

//Open nearby paths if the level was beaten
alarm[0] = 2;

//Reset time
global.time = 0;

//Reset berries
global.berries = 0;

//Reset starman and pswitch
global.starman = 0;
global.pswitch = 0;

//Reset 'Return to map' option
global.levelbeat = 0;

//Reset checkpoints
global.checkpoint = 0;

//Reset on/off blocks
global.onoffyellow = 0;
global.onoffgreen = 0;
global.onoffred = 0;
global.onoffblue = 0;
global.onoffpurple = 0;
global.onofforange = 0;

//Reset held variables
global.carrieditem = noone;
global.carriedsprite = noone;

//Reset ace coins
ds_map_clear(global.acecoins);

//Reset red coin rings
ds_map_clear(global.redrings);

//Reset all door states
ds_map_clear(global.doors);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change frame

alarm[3] = 7;
frame = !frame;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow completion of levels

global.clear = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the destination room
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open adyacent paths
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map player animation

//Stop it if it can't move
if (ready == 1) then speed = 0;

//If the player is about to enter a stage, make him do the victory pose.
if (letsgo == 1) {

    //Do not animate
    image_index = 8;
        
    //Set default facing direction
    xscale = 1;
}

//Otherwise, set default animation
else {

    //If the player is not moving
    if (speed == 0) {
    
        //Do not animate
        image_index = 0;
        
        //Set default facing direction
        xscale = 1;
    }
    
    //Otherwise
    else {
    
        //If the player is moving to the left or the right
        if (direction == 0)
        || (direction == 180) {
        
            //Do not animate
            image_index = 4;
            
            //Set facing direction
            if (hspeed &gt; 0)
                xscale = 1;
            else if (hspeed &lt; 0)
                xscale = -1;
        }
        
        //Otherwise, if the player is moving up or down
        else {
        
            //If the player's horizontal speed is lower or greater than 0
            if (hspeed != 0) {
            
                //Set the frame
                image_index = 4;
                
                //Set the facing direction
                if (hspeed &gt; 0)
                    xscale = 1;
                else if (hspeed &lt; 0)
                    xscale = -1;
            }
            
            //Otherwise, if the player is moving up or down
            else {
            
                //Set the default facing direction
                xscale = 1;
                
                //If the player is climbing
                if (place_meeting(x,y,obj_climb))
                    image_index = 6;
                
                //Otherwise
                else {
                    
                    //If the player is moving up
                    if (direction == 90)
                        image_index = 2
                        
                    //Otherwise, if the player is moving down
                    else if (direction == 270)
                        image_index = 0;
                }
            }
        }
    }
}

//Update animation for arrows
anim += 0.075;

//Set default speed if not climbing
if (image_index != 6)
&amp;&amp; (speed &gt; 0) &amp;&amp; (speed &lt; 1)
    speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map player logic

//If the inventory is opened or the player can't move and the paths are opening or the save menu is showing.
if (ready)
|| (instance_number(obj_opener) &gt; 0)
|| (instance_number(obj_savemenu) &gt; 0)
    exit;
    
//Map path opener (Comment or delete when releasing your game)
if (keyboard_check_pressed(global.controlkey)) {

    //If the player speed is 0 and there' no opener object active
    if (speed == 0)
    &amp;&amp; (instance_number(obj_opener) == 0) {
    
        //Check for a path above
        var mypath_u = collision_rectangle(x,y-4,x,y-4,obj_mappathparent,0,0);
        if (mypath_u)
        &amp;&amp; (mypath_u.visible == false)
            with (instance_create(x-8,y,obj_opener)) motion_set(90,2);
                
        //Check for a path below
        var mypath_d = collision_rectangle(x,y+20,x,y+20,obj_mappathparent,0,0);
        if (mypath_d)
        &amp;&amp; (mypath_d.visible == false)
            with (instance_create(x-8,y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the left
        var mypath_l = collision_rectangle(x-12,y+8,x-12,y+8,obj_mappathparent,0,0);
        if (mypath_l)
        &amp;&amp; (mypath_l.visible == false)
            with (instance_create(x-8,y,obj_opener)) motion_set(180,2);
                
        //Check for a path to the right
        var mypath_r = collision_rectangle(x+11,y+8,x+11,y+8,obj_mappathparent,0,0);
        if (mypath_r)
        &amp;&amp; (mypath_r.visible == false)
            with (instance_create(x-8,y,obj_opener)) motion_set(0,2);
    }
}
    
//If the 'Up' key is pressed
if (keyboard_check_pressed(global.upkey)) {

    //Check for a path
    var mypath = collision_rectangle(x,y-4,x,y-4,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            vspeed = -1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);
}

//Otherwise, if the 'Down' key is pressed
else if (keyboard_check_pressed(global.downkey)) {

    //Check for a path
    var mypath = collision_rectangle(x,y+20,x,y+20,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            vspeed = 1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);
}

//Otherwise, if the 'Left' key is pressed
else if (keyboard_check_pressed(global.leftkey)) {

    //Check for a path
    var mypath = collision_rectangle(x-12,y+8,x-12,y+8,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            hspeed = -1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);    
}

//Otherwise, if the 'Right' key is pressed
else if (keyboard_check_pressed(global.rightkey)) {

    //Check for a path
    var mypath = collision_rectangle(x+11,y+8,x+11,y+8,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            hspeed = 1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_emptynode">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop when moving

if (speed &gt; 0)
&amp;&amp; (x == other.x+8)
&amp;&amp; (y == other.bbox_top) {

    //Play 'Move' sound
    audio_play_sound(snd_move, 0, false);
    
    //Stop it
    speed = 0;
    
    //Snap on node
    x = other.x+8;
    y = other.bbox_top;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_levelnode">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop when moving

if (speed &gt; 0)
&amp;&amp; (x == other.x+8)
&amp;&amp; (y == other.bbox_top) {

    //Play 'Move' sound
    audio_play_sound(snd_move, 0, false);
    
    //Stop it
    speed = 0;
    
    //Snap on node
    x = other.x+8;
    y = other.bbox_top;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_downright">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down if moving left or go right if moving up

//If moving right
if (hspeed &lt; 0) {

    if (x-8 == other.x+8)
        vspeed = 1;
    if (x-8 == other.x)
        hspeed = 0;
}

//If moving down
if (vspeed &lt; 0) {

    if (y == other.y+8)
        hspeed = 1;
    if (y == other.y)
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_downleft">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down if moving right or go left if moving up

//If moving right
if (hspeed &gt; 0) {

    if (x-8 == other.x-8)
        vspeed = 1;
    if (x-8 == other.x)
        hspeed = 0;
}

//If moving down
if (vspeed &lt; 0) {

    if (y == other.y+8)
        hspeed = -1;
    if (y == other.y)
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_upright">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up if moving left or go right if moving down

//If moving left
if (hspeed &lt; 0) {

    if (x-8 == other.x+8)
        vspeed = -1;
    if (x-8 == other.x)
        hspeed = 0;
}

//If moving down
if (vspeed &gt; 0) {

    if (y == other.y-8)
        hspeed = 1;
    if (y == other.y)
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_upleft">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up if moving right or go left if moving down

//If moving right
if (hspeed &gt; 0) {

    if (x-8 == other.x-8)
        vspeed = -1;
    if (x-8 == other.x)
        hspeed = 0;
}

//If moving down
if (vspeed &gt; 0) {

    if (y == other.y-8)
        hspeed = -1;
    if (y == other.y)
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player display some arrows

//Check for a path above
var mypath_u = collision_rectangle(x,y-4,x,y-4,obj_mappathparent,0,0);
if (mypath_u)
&amp;&amp; (mypath_u.visible)
    draw_sprite_ext(spr_mapmario_arrows,anim,x,y-12,1,1,90,c_white,1);
        
//Check for a path below
var mypath_d = collision_rectangle(x,y+20,x,y+20,obj_mappathparent,0,0);
if (mypath_d)
&amp;&amp; (mypath_d.visible)
    draw_sprite_ext(spr_mapmario_arrows,anim,x,y+20,1,1,270,c_white,1);
    
//Check for a path to the left
var mypath_l = collision_rectangle(x-12,y+8,x-12,y+8,obj_mappathparent,0,0);
if (mypath_l)
&amp;&amp; (mypath_l.visible)
    draw_sprite_ext(spr_mapmario_arrows,anim,x-16,y+4,1,1,180,c_white,1);
        
//Check for a path to the right
var mypath_r = collision_rectangle(x+11,y+8,x+11,y+8,obj_mappathparent,0,0);
if (mypath_r)
&amp;&amp; (mypath_r.visible)
    draw_sprite_ext(spr_mapmario_arrows,anim,x+16,y+4,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the player is riding a yoshi
if (global.mount == 1) {

    //Set the palette
    pal_swap_set(player_palette_get(), global.mountcolour);

    //If the player is climbing
    if (image_index == 6)
        draw_sprite_ext(spr_mapmario_yoshi,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
    
    //Otherwise
    else {
    
        //If the player is in contact with water, draw him inside water
        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))
            draw_sprite_ext(spr_mapmario_yoshi_water,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
        
        //Otherwise
        else
            draw_sprite_ext(spr_mapmario_yoshi,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
    }
    
    //Reset palette
    pal_swap_reset();
}

//Otherwise, if the player is not riding a yoshi
else {

    //If the player is climbing
    if (image_index == 6)
        draw_sprite_ext(spr_mapmario,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
    
    //Otherwise
    else {
    
        //If the player is in contact with water, draw him inside water
        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))
            draw_sprite_ext(spr_mapmario_water,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
        
        //Otherwise
        else
            draw_sprite_ext(spr_mapmario,image_index+frame,round(x),round(y)-4,xscale,1,0,c_white,1);
    }    
}

//Show arrows if stopped
if (speed == 0)
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
