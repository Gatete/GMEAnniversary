<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gatete Mario Engine: Anniversary Edition Persistent Object

//Initialize palette system
pal_swap_init_system(shd_palette_swapper);

//Flight time
global.flighttime = 4;

//Health Mode
global.healthmode = 0;

//Cat climb time
global.cattime = 3;

//Game width
global.gw = 384;

//Game height
global.gh = 216;

//Initialize global variables
init_globals();

//Lives to give
addlives = 0;

//Screenshot of the game, if it exists
back = -1;

//Screen shaking
port_x = 0;
port_y = 0;

//Is the game being restarted
restart = 0;

//Data structure for picked up 3up moons
global.moons = ds_map_create();

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001);

//Regular Numbers
global.numbers_w = font_add_sprite_ext(spr_numbers,"0123456789",0,0);

//Regular Gold Numbers
global.numbers_g = font_add_sprite_ext(spr_numbersgold,"0123456789",0,0);

//Regular Font
global.font = font_add_sprite(spr_hud_font,ord('!'),1,0);

//Message Font
global.font_message = font_add_sprite(spr_hud_font_message,ord('!'),0,0);

//Interface font
global.font_interface = font_add_sprite(spr_hud_font_interface,ord('!'),0,0);

//Disable application surface automatic drawing
application_surface_draw_enable(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when certain sounds are playing.

if (audio_is_playing(snd_thwomp)) {
    
    //Repeat
    alarm[11] = 1;    
    
    //Shake the screen...    
    port_x = random_range(4,-4);
    port_y = random_range(4,-4);
}
else {

    port_x = 0;
    port_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give spare lives left

if (addlives &gt; 0) {

    //Play '1up' sound
    audio_play_sound(snd_1up, 0, false);

    //Add a life
    lives++;
    
    //Subtract a spare life
    addlives--;
    
    //Continue
    alarm[2] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay applying settings

//Apply fullscreen
window_set_fullscreen(fullscreen);

//Apply filtering and VSync
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle various in-game variables

//Gamepad support
var index = 4;

//If there is a gamepad connected and the window is visible
if (gamepad_is_connected(index)) &amp;&amp; (window_has_focus()) {

    //L-Stick Left / D-Pad Left
    if (gamepad_axis_value(index,gp_axislh) &lt;= -0.4) || (gamepad_button_check(index, gp_padl)) then keyboard_key_press(global.leftkey);       
    else keyboard_key_release(global.leftkey);
    
    //L-Stick Right / D-Pad Right
    if (gamepad_axis_value(index,gp_axislh) &gt;= 0.4) || (gamepad_button_check(index, gp_padr)) then keyboard_key_press(global.rightkey);
    else keyboard_key_release(global.rightkey);
    
    //L-Stick Up / D-Pad Up
    if (gamepad_axis_value(index,gp_axislh) &lt;= -0.4) || (gamepad_button_check(index, gp_padu)) then keyboard_key_press(global.upkey);
    else keyboard_key_release(global.upkey);
    
    //L-Stick Down / D-Pad Down
    if (gamepad_axis_value(index,gp_axislh) &lt;= -0.4) || (gamepad_button_check(index, gp_padd)) then keyboard_key_press(global.downkey);
    else keyboard_key_release(global.downkey);
    
    //A Button / B Button (Shift)
    if ((gamepad_button_check(index,gp_face2)) || (gamepad_button_check(index,gp_face1))) then keyboard_key_press(global.shiftkey);
    else keyboard_key_release(global.shiftkey);
    
    //X Button / Y Button (Control)
    if ((gamepad_button_check(index,gp_face4)) || (gamepad_button_check(index,gp_face3))) then keyboard_key_press(global.controlkey);
    else keyboard_key_release(global.controlkey);
    
    //Start Key
    if (gamepad_button_check(index,gp_start)) then keyboard_key_press(global.enterkey);
    else keyboard_key_release(global.enterkey);
    
    //Select Key
    if (gamepad_button_check(index,gp_select)) then keyboard_key_press(global.spacekey);
    else keyboard_key_release(global.spacekey);        
}

//Update wport
view_wport[0] = global.gw;

//Update hport
view_hport[0] = global.gh;

//Update wview
view_wview[0] = global.gw;

//Update hview
view_hview[0] = global.gh; 

//Update hborder
view_hborder[0] = (global.gw/2)-8;

//Update vborder
view_vborder[0] = global.gh/2;

//Enable views if not enabled
view_enabled = true;

//Make view 0 visible if not visible
view_visible[0] = true;

//Make sure lives don't go over 99
if (lives &gt; 99) then lives = 99;

//Make sure score don't go over 9999999990
if (score &gt; 9999999990) then score = 9999999990;

//Make the screen shake when the 'Thwomp' sound plays
if (!audio_is_playing(snd_thwomp))
    alarm[11] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hot keys

//Quit the game when ALT+F4 are pressed.
if (keyboard_check_pressed(vk_f4))
    game_end();
    
//Restart the game when ALT+R are pressed.
else if (keyboard_check_pressed(ord('R'))) {

    //Reset all stream variables
    with (obj_persistent_musicplayer) {
    
        //Reset overworld map BGM control variable
        mapmusicinit = false;
        
        //Reset map theme
        mapmusic = noone;
        
        //Stop all FMOD instances
        FMODAllStop();
    }
    
    //Restart?
    restart = 1;

    //Reset all global variables
    init_globals();
    
    //Stop all audio
    audio_stop_all();
    
    //Go to disclaimer screen
    if (instance_number(obj_fadein) == 0)    
        with (instance_create(0,0,obj_fadein)) target = rm_disclaimer;
}

//Fullscreen (Handled by GM: Studio)
else if (keyboard_check_pressed(vk_enter)) {

    //Toggle between fullscreen or windowed mode.
    fullscreen = !fullscreen
        
    //Apply settings
    event_user(1);
}

//Toggles VSync
else if (keyboard_check_pressed(ord('V'))) {

    //Toggle vertical syncronization on / off.
    vsync = !vsync
        
    //Apply settings
    event_user(1);
}

//Toggle FPS display
else if (keyboard_check_pressed(ord('F')))
    showfps = !showfps

//Set default window size
else if (keyboard_check_pressed(ord('1'))) {

    filter = 0;
    event_user(0);
}

//Set 2x window size
else if (keyboard_check_pressed(ord('2'))) {

    filter = 1;
    event_user(0);
}

//Set 3x window size
else if (keyboard_check_pressed(ord('3'))) {

    filter = 2
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//Temporary variable
var s;

//Normal
if (filter = 0)
    s = 1;

//HQ2X
else if (filter = 1)
    s = 2;

//HQ4X
else if (filter = 2)
    s = 3;

//Reset display
display_reset(0,vsync);

//Set up the window
window_set_size(global.gw*s,global.gh*s);

//Set up the display
display_set_gui_size(global.gw*s,global.gh*s);

//Center the window
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check various in-game values

//Make sure to give the player the big state if health is greater than 1
if (global.healthmode) {

    if (health &gt; 1)
    &amp;&amp; (global.powerup = cs_small)
        global.powerup = cs_big;
}

//Allow restart
restart = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Keys + Fullscreen + Window size + VSync Settings

//Open the file
var file = file_text_open_write("settings.dat");

//Save fullscreen settings
file_text_write_string(file,string(fullscreen));
file_text_writeln(file);

//Save filtering settings
file_text_write_string(file,string(filter));
file_text_writeln(file);

//Save vsync settings
file_text_write_string(file,string(vsync));
file_text_writeln(file);

//Save control key
file_text_write_string(file,string(real(global.controlkey)));
file_text_writeln(file);

//Save shift key
file_text_write_string(file,string(real(global.shiftkey)));
file_text_writeln(file);

//Save space key
file_text_write_string(file,string(real(global.spacekey)));
file_text_writeln(file);

//Save enter key
file_text_write_string(file,string(real(global.enterkey)));
file_text_writeln(file);

//Save up key
file_text_write_string(file,string(real(global.upkey)));
file_text_writeln(file);

//Save down key
file_text_write_string(file,string(real(global.downkey)));
file_text_writeln(file);

//Save left key
file_text_write_string(file,string(real(global.leftkey)));
file_text_writeln(file);

//Save right key
file_text_write_string(file,string(real(global.rightkey)));

//Close the file
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Keys + Fullscreen + Window size + VSync Settings

//If the 'settings.dat' file exist.
if (file_exists("settings.dat")) {

    //Open the file
    var file = file_text_open_read("settings.dat");

    //Set fullscreen mode based on the read value
    fullscreen = real(file_text_read_string(file));
    file_text_readln(file);

    //Set filtering mode based on the read value
    filter = real(file_text_read_string(file));
    file_text_readln(file);

    //Set vsync based on the read value
    vsync = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Control'
    global.controlkey = real(file_text_read_string(file));
    file_text_readln(file);

    //Set key assigned to 'Shift'
    global.shiftkey = real(file_text_read_string(file));
    file_text_readln(file);

    //Set key assigned to 'Space'
    global.spacekey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Enter'
    global.enterkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Up'
    global.upkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Down'
    global.downkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Left'
    global.leftkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Right'
    global.rightkey = real(file_text_read_string(file));

    //Close the file
    file_text_close(file);
}
else {

    //Fullscreen is off by default
    fullscreen = 0;

    //Set the window to double of it's original size
    filter = 2;

    //VSync is off by default
    vsync = 0;
    
    //Control key
    global.controlkey = vk_control;
    
    //Shift key
    global.shiftkey = vk_shift;
    
    //Space key
    global.spacekey = vk_space;
    
    //Enter key
    global.enterkey = vk_enter;
    
    //Up key
    global.upkey = vk_up;
    
    //Down key
    global.downkey = vk_down;
    
    //Left key
    global.leftkey = vk_left;
    
    //Right key
    global.rightkey = vk_right;
}

//Apply loaded settings
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, window size, and fading.

//Disable alpha blending
draw_enable_alphablend(false)

//No Filter
if (filter = 0) {

    draw_rectangle_colour(0,0,global.gw,global.gh,c_black,c_black,c_black,c_black,0);
    draw_surface(application_surface,port_x,port_y);
}

//2x Filtering 
else if (filter = 1) {

    draw_rectangle_colour(0,0,global.gw*2,global.gh*2,c_black,c_black,c_black,c_black,0);
    draw_surface_stretched(application_surface,port_x*2,port_y*2,global.gw*2,global.gh*2);
}

//3x Filtering
else if (filter = 2) {

    draw_rectangle_colour(0,0,global.gw*3,global.gh*3,c_black,c_black,c_black,c_black,0);
    draw_surface_stretched(application_surface,port_x*3,port_y*3,global.gw*3,global.gh*3);
}

//Enable alpha blending
draw_enable_alphablend(true)

//Show FPS if below 60
draw_set_font(global.font_interface);
draw_set_colour(c_white);
if (fps &lt; 60)
    draw_text(2,2,string("LAG"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw background if the window has not focus

//If the background exists
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back,view_xview[0],view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
